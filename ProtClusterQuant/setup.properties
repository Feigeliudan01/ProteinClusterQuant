#####################################################
# ALGORITHM MAIN PARAMETERS, THRESHOLDS AND FILTERS:
#####################################################

inputType = FILE_TYPE
#	This parameter takes into consideration the type/format of data for input into the program. The possible values for the file type are:
#	CENSUS_CHRO - for data that was acquired based on isobaric isotopologue labeling of peptides
#	CENSUS_OUT - from ip2 for data that was acquired in silac format.
#	SEPARATED_VALUES - tab delimited data file containing the following columns:
#		Column 1: PSM identifier
#		Column 2: peptide sequence
#		Column 3: ratio value (not log values!!).
#		Column 4: ratio weight. This value can be any value measuring the quality of the ratio measurement. For example, for iTRAQ ratios, it could be the intensity of the higher peak contributing to the ratio; for SILAC it could be a measurement of the MS1 area divided by the fitting curve quality.
#		Column 5: protein accession [OPTIONAL]. This column can be avoided if a fasta file is provided with the 'fasta_file' parameter.

collapseIndistinguishablePeptides = TRUE/FALSE
#	In case the toggle is set to TRUE peptide nodes of individual peptides that are connected to exactly the same protein nodes are collapsed into one single peptide node.  It reduces peptide node redundancies in connected components.
#	Default value if not provided: TRUE

collapseIndistinguishableProteins = TRUE/FALSE
#	In case the toggle is set to TRUE protein nodes of individual proteins that are connected to exactly the same peptide nodes are collapsed into one single protein node. It reduces protein node redundancies in a connected component.
#	Default value if not provided: TRUE

onlyOneSpectrumPerChromatographicPeakAndPerSaltStep = TRUE/FALSE
#	This parameter is only valid MS1-based quantitation data (like SILAC) and inputType = CENSUS_OUT.
#	When this parameter is set TRUE, it means that that only the best PSM will be taken from each chromatographic peak and salt step irrespective whether the quantification was done based on the heavy or the light peak that was identified. It prevents that a chromatographic pair gets included in the calculations twice because it was identified in light as well as in heavy. Note that using DTASelect the parameter -t 1 should be used prior to quantification and use of PCQ.

ionsPerPeptideNodeThresholdOn = TRUE/FALSE
#	Toggle that when set to TRUE a minimum amount of ions per peptide node is required in order to not being discarded.
#	Default value if not provided: FALSE.

ionsPerPeptideNodeThreshold = NUMERIC_VALUE
#	This parameter works with the parameter 'ionsPerPeptideNodeThresholdOn' to set the minimum amount of ions per peptide node to consider it in further analysis.
#	This filter is only applied if fileType = CENSUS_CHRO, that is, for data acquired based on isobaric isotopologue labeling of peptides.
#	Default value if not provided: 0.

psmsPerPeptideNodeThresholdOn = TRUE/FALSE
#	Toggle that when set TRUE, checks if there is a threshold for minimum PSMs per peptide node.
#	Default value if not provided: FALSE.

psmsPerPeptideNodeThreshold = NUMERIC_VALUE
#	This parameter works with the parameter 'psmsPerPeptideNodeThresholdOn' to define a minimum number of PSMs per peptide node to consider it in further analysis.
#	Default value if not provided: 0.

skipSingletons = TRUE/FALSE
#	This parameter is only valid MS1-based quantitation data (like SILAC) and inputType = CENSUS_OUT.
#	When this parameter is set to TRUE, the singletons (quantified peptides only detected in one of the two conditions) are skipped and not considered in further analysis.  

labelSwap = TRUE/FALSE
#	This parameter should only be set to TRUE when a label swap experiment is analyzed, e.g. experiments are analyzed simultaneously in which sample 1 was labeled light and sample 2 heavy in one experiment(s) and sample 1 labeled heavy and sample 2 labeled light in another set of experiments. NOTE: use correct operators to denote experiments in parameter 'inputFiles'.

##########################################
# PEPTIDE NODE RATIO INTEGRATION ALGORITHM
##########################################
# Minimal parameters needed to perform the quantitative analysis within the protein-peptide network. Mol Cell Proteomics. 2011 Jan;10(1):M110.003335. doi: 10.1074/mcp.M110.003335. Epub 2010 Aug 31.

performRatioIntegration = TRUE/FALSE
#	The parameter toggles whether PCQ does analyze the relative amount of each peptide node. If the parameter is set to FALSE, no ratio calculation will be performed and no ratio value per peptide node will be indicated in the results. However it allows the user to assemble the protein-peptide network.
#	Default value if not provided: FALSE.

outliersRemovalFDR = NUMERIC_VALUE
#	At each level of quantitative data integration (for example from PSM to peptide) outlier values are removed in case they are below a specified FDR. It allows to remove measurement values that are a result of an error of measurement.
#	In case no numeric value is specified, the removal of outliers will not be performed.
#	Examples: outliersRemovalFDR = 0.01

significantFDRThreshold = NUMERIC_VALUE
#	This parameters refers to a threshold applied in the final ratio of the peptide node calculated after the ratio integration algorithm. The algorithm will report a FDR associated to each final peptide node ratio, and this threshold will determine if the peptide node is considered as significantly changing.
#	If this parameter is set, some statistics about the number of significantly regulated peptide nodes will be available in the summary file and an additional network file (XGMML) will be create containing the cluster that contains at least one peptide node with a FDR under the threshold.
#	If not provided, no statistics and additional network file is created.
#	Example: significantFDRThreshold = 0.05

####################################
# PROTEIN PAIR ANALYSIS PARAMETERS
####################################

applyClassificationsByProteinPairs = TRUE/FALSE
#	If this parameter is set to TRUE, the protein pair analysis is performed. If is set to FALSE, all the other parameters in this section will be ignored.
#	Default value if not provided: FALSE.

thresholdForSignificance = NUMERIC_VALUE
#	This parameter dictates the threshold of the fold chance (log2 value as input) in determining significantly regulated or not in the protein pair analysis.  This parameter is for marking significance and the higher the value, the larger the difference in ratios of peptides or proteins required to be considered significantly regulated.
#	This parameters is ignored if applyClassificationsByProteinPairs = FALSE.
#	Default value if not provided: 2.

iglewiczHoaglinTest = NUMERIC_VALUE
#	This parameter sets the value for the Iglewicz-Hoaglin test. Usually 3.5 is considered a standard threshold value. This is a test applied in the protein pair analsysis to check if there are any peptide node outliers in each protein pair.  If the results from this test equal or is greater than the value of the variable, it will be considered an outlier in the protein pair analysis.
#	The value calculated for this test is, giving a protein pair and testing the peptide node with ratio xi, the result of the test is calculated as Mi=0.6745(xi\u2212x~)/MAD where x~ is the median of the population and MAD is the median absolute deviation of the population, considering the population all the individual PSM-level ratios in the rest of the peptide nodes of the protein pair.
#	Default value if not provided: 3.5
#	This parameter is ignored if applyClassificationsByProteinPairs = FALSE.

uniquePepOnly = TRUE/FALSE
#	This parameter, when set to TRUE, directs PCQ to compile protein pairs with peptide nodes that are unique within a connected component. When set to FALSE a 'protein pair centric' view is applied meaning that protein pairs are assembled independent of whether a peptide node for a protein pair is unique within the connected component.
#	Default value if not provided: TRUE.

#######################################
# PEPTIDE SEQUENCE ALIGNMENT PARAMETERS
#######################################
# As an option for the user, peptide-to-peptide sequence alignments can be performed in order to detect analogous and orthologous sequences and cluster them in the same connect component. This could be useful for a multi-species comparison analysis.

makeAlignments = TRUE/FALSE
#	This parameter, when set to TRUE, aligns the peptides by similarity and denotes the similarity by an edge within the output protein-peptide network (XGMML files).
#	This parameter, as well as the rest of the parameters in this section are based of the Needleman-Wunsch alignment algorithm. This algorithm takes into consideration point mutations, deletions and insertions in peptide sequences and uses the BLOSUM62 matrix. 
#	Note that it is only executed in case peptide nodes are based on single, individual peptide sequences (e.g. the value of the parameter 'collapseIndistinguishablePeptides' is set to FALSE), otherwise PCQ will report an error.
#	Default value if not provided: FALSE.

finalAlignmentScore = NUMERIC_VALUE
#	This parameter sets the limit for the final alignment score from the Needleman-Wunsch alignment algorithm. Only alignments of peptide sequences with an score greater than that will be reported in the results.
#	Default value if not provided: 30.
#	Example: finalAlignmentScore = 30

sequenceIdentity = NUMERIC_VALUE
#	This parameter sets the threshold on the sequence identify score from the Needleman-Wunsch alignment algorithm. Only alignments above that threshold will be considered in the analyisis.
#	Default value if not provided: 0.8.
#	Example: sequenceIdentity = 0.8

minConsecutiveIdenticalAlignment = NUMERIC_VALUE
#	This value determines how many aminoacids have to consecutively be identical to be considered a valid alignment.
#	Default value if not provided: 6.
#	Example: minConsecutiveIdenticalAlignment = 6

############################################################################
# PARAMETERS TO PROPERLY READ IN THE DATABASE AND ASSIGN PEPTIDES TO PROTEINS:
############################################################################
# In case the input files doesn\u2019t contains all the peptide-to-protein connections (because the software who generated them remove some of the subset proteins or performed a protein inference heuristic),
# you can use a protein sequence database in order to map all the possible peptide-to-protein connections without losing any isoform for example. 
# Note: These parameters should be set according to the initial parameters used to search the database for identified peptide hits as well as how the search results were filtered.

enzymeArray =  TEXT, TEXT, ...
#	This parameter specify the aminoacids where protease cleaves. Note: amino acids that are recognized as cleavage site are provided as comma-separated (',') values.
o	Trypsin cleaves at K and R, so 'K,R' should set here.
o	LysC cleaves at K only, so 'K' should be set here.
#	Default value if not provided: K,R
#	Example: enzymeArray = K,R 

missedCleavages = NUMERIC_VALUE
#	This parameter allows the user to select how many missed cleavages were allowed in the search of the spectra.
#	Default value if not provided: 0.
#	Example: missedCleavages = 2

discardDecoys = TEXT
#	Regular expression for discarding decoys from input files.
#	If empty or not provided, no decoys will be discarded from input files.
#	Example: discardDecoys = Reverse_

ignoreNotFoundPeptidesInDB = TRUE/FALSE
#	If this parameter is set to TRUE, PCQ will check that all the peptides provided in the input files are found in the FASTA file (if provided). This is useful in order to check that the fasta in-silico digestion parameters are set correctly as well as in order to ensure that the correct database is being used.
#	Default value if not provided: FALSE.

fastaFile = FILEPATH
#	Full path in which a FASTA database file is located

# C-TERM OR N-TERM CLEAVAGE PARAMETER IS MISSING. --- ANY OTHER PARAMETERS MISSING HERE???????


##########################
# INPUT FILES AND FOLDERS:
##########################

inputFilePath = FILEPATH
#	Full path of the folder in which all the input files are located.
#	Default value if not provided: the system user\u2019s home folder.
#	Example: inputFilePath = C:\\Users\\Salva\\Desktop\\data\\PINT projects\\Fibulin\\LacZ

inputFiles = EXP_NAME[FILE_NAME1, FILE_NAME2, ...] | EXP2_NAME[FILE_NAME4, FILE_NAME5, ...]
#	This parameter specifies the input files to be used and groups them into groups, in order to be treated properly. EXP_NAME is an internal tag for the group of files provided subsequently between brackets. Several groups are separated by '|'. Several file names are separated by ','. File names don\u2019t include path names, because they are expected to be found in the folder specified by the inputFilePath parameter.
#	This parameter is required.
#	Examples:
#		DmDv[DmDv_rep1.xml, DmDv_rep2.xml, DmDv_rep3.xml] | DvDm[DvDm_rep1.xml, DvDm_rep2.xml, DvDm_rep3.xml]
#		A_Embryos[A_Embryos_rep1.xml, A_Embryos_rep2.xml, A_Embryos_rep3.xml]
#		isobaric_HEK[isobaric_HEK.xml]
#		CFBEvsHSB[CFBEvsHBE.xml]
#		Fibulin_LacZ[Fibulin_LacZ_rep1.txt, Fibulin_LacZ_rep2.txt, Fibulin_LacZ_rep3.txt]

uniprotReleasesFolder = FILEPATH
#	This parameter points to the folder where the UniProt annotations are going to be automatically stored in the machine were PCQ runs. UniProt annotations are retrieved from the latest version of UniProtKB in order to associate gene names, taxonomies, etc... that may not be available in the protein description line provided in the input files.
#	This process may take some time and some disk space, depending on the dataset size. However, once the annotations are locally stored, PCQ will retrieve the annotations from the local resource, taking just a few seconds.
#	Default value if not provided: the system user\u2019s home directory.
#	Example: uniprotReleasesFolder = C:\\Users\\Salva\\Desktop\\tmp\\uniprotKB

uniprotVersion = FORMATED_DATE
#	This parameter states the Uniprot release to use, corresponding to the subfolder name created in the folder stated by the uniprotReleasesFolder.
#	Leave blank for getting latest version annotations. In that case, each month, UniProtKB releases a new version of the database and therefore PCQ will retrieve the information from Uniprot again and will store a new version of the annotations, creating a subfolder with the release date.
#	Example: uniprotVersion = 2016_07

outputFilePath = FILEPATH
#	This parameter points to the folder in which all output files will be generated on computer.
#	Default value if not provided: system user\u2019s home folder.
#	Example: outputFilePath = C:\\Users\\Salva\\Desktop\\data\\Fibulin\\LacZ\\quant

outputPrefix = TEXT
#	Prefix appended to all output files.
#	This parameter is required.
#	Example: outputPrefix = Fibulin_LacZ_OLD_DB

outputSuffix = TEXT 
#	Suffix appended to all output files.
#	This parameter is required.
#	Example: outputSuffix = 3PSMsPerPeptideNode_NoSingletons	 

###########################
# OPTIONS FOR ADDITIONAL OUTPUT FILES:
###########################
generateMiscellaneousFiles = TRUE/FALSE
#   If set to TRUE, additional output files will be generated as:
#   - 	prefix_kmeans_suffix.txt: file in which for each Protein Pair it has a new line containing: ClassificationCase1, Protein1_ACC(s), Protein2_ACC(s), UniqueRatio1(U1), SharedRatio(S), UniqueRatio(U2).
#   -   prefix_proteinPairs_suffix.txt: file containing a line per protein pair, describing the classification cases as: UniquePep1 RatioU1 Protein1 SharedPep RatioS Protein2 UniquePep2 RatioU2 ClassificationCase1 ClassificationCase2
	
kMeans = TRUE/FALSE
#	This parameter prints out additional lines in the output file. Each line will be referring to a protein pair, and will contain the protein accessions and the final ratios of the unique and share peptide nodes. This is useful for further analysis on MATLAB using k-means clustering.
#	Default value if not provided: TRUE.

printOnlyFirstGene= TRUE/FALSE
#	When this is set to TRUE, the program prints only the first gene when collapsing several proteins.  
#   This is applicable to the output files, but it is particularly useful for the tooltip on the proteins in the Cytoscape network visualization in order to avoid over-crowded tooltip text boxes.

###############################
# SPECIES COMPARISON PARAMETERS
###############################
# These parameters are meant for experiments in which each of the sample used for relative quantification may be from a different species.  If two different species have been labelled heavy and light, respectively, these parameters will allow the program to estimate the number of incorrect quantifications. Needs to match with the scientific annotation of the species in Uniprot.

lightSpecies = TEXT
#	Species that was labeled light. When this parameter is set, some statistics are shown in the output summary file.
#	Example: lightSpecies = Drosophila virilis

heavySpecies = TEXT
#	Species that was labeled heavy. When this parameter is set, some statistics are shown in the output summary file.
#	Example: heavySpecies = Drosophila virilis

##############################################
# GRAPHIC OPTIONS FOR CYTOSCAPE EXPORT NETWORK
##############################################
# Color settings are encoded in hex-RGB color code

colorsByTaxonomy = TEXT, hex-RGB 
#	Defines the color of the protein nodes depending to the taxonomy of the protein(s) in the node. It is a comma separated string were the first string is the scientific name of the taxonomy and the second string is the hex-RGB color code. If more than one taxonomy is present, it should be concatenated after a comma (see example).
#	Default value if not provided: WHITE color.
#	Example: colorsByTaxonomy = Drosophila Virilis,#ff0000,Drosophila Melanogaster,#00ff00

colorMultiTaxonomy = hex-RGB
#	Defines the color the protein nodes that contains more than one taxonomy.
#	Default value if not provided: WHITE color.
#	Example: colorMultiTaxonomy = #123456

colorAlignedPeptidesEdge = hex-RGB
#	Defines the color of the edge which connects two peptide nodes that have been aligned (makeAlignments = TRUE).
#	Default value if not provided: RED color.

proteinLabel = PROTEIN_LABEL_TYPE 
#	This parameter indicates which information will be displayed as the label of the protein nodes in the output Cytoscape networks. The possible values of this parameter are:
# 		ACC. The labels on the protein nodes will be as: 'P12345' or 'P12345, O12345'.
#		ID. The labels on the protein nodes will be as: 'APO_HUMAN'
#	Default value if not provided: ACC.

minimumRatioForColor = NUMERIC_VALUE
#	This parameter states the lower value of a log2 ratio range defining the gradient of colors between colorRatioMin and colorRatioMax.
#	Any log2 ratio value lower than this value will be showed with the color defined in parameter colorRatioMin.
#	Default value if not provided: -10.

maximumRatioForColor = NUMERIC_VALUE
#	This parameter states the higher value of a log2 ratio range defining the gradient of colors between colorRatioMin and colorRatioMax.
#	Any log2 ratio value higher than this value will be showed with the color defined in parameter colorRatioMax.
#	Default value if not provided: 10.

colorRatioMin = #0000ff
#	This parameter defines lower color of the color gradient for the peptide nodes.
#	The peptides nodes will be shown with a color depending on their final peptide node ratio value and the ratio range defined by minimumRatioForColor and maximumRatioForColor.
#	Default value if not provided: "#0000ff" (BLUE).

colorRatioMax = #ff0000
#	This parameter defines higher color of the color gradient for the peptide nodes.
#	The peptides nodes will be shown with a color depending on their final peptide node ratio value and the ratio range defined by minimumRatioForColor and maximumRatioForColor.
#	Default value if not provided:  '#ff0000 (RED).

proteinNodeWidth = NUMERIC_VALUE
#	This parameters defines the width of the protein nodes in the Cytoscape network view.
#	Default value if not provided: 70.

proteinNodeHeight = NUMERIC_VALUE
#	This parameters defines the height of the protein nodes in the Cytoscape network view.
#	Default value if not provided: 30.

peptideNodeWidth = NUMERIC_VALUE
#	This parameters defines the width of the peptide nodes in the Cytoscape network view.
#	Default value if not provided: 70.

peptideNodeHeight = NUMERIC_VALUE
#	This parameters defines the height of the peptide nodes in the Cytoscape network view.
#	Default value if not provided: 30.

proteinNodeShape = SHAPE_TYPE
#	This parameter defines the shape of the protein nodes in the Cytoscape network view. The possible values of this parameter are:
#		ELLIPSE, RECTANGLE, TRIANGLE, DIAMOND, HEXAGON, OCTAGON, PARALLELOGRAM, ROUNDRECT, VEE
#	Default value if not provided:  ELLIPSE.

peptideNodeShape = SHAPE_TYPE
#	This parameter defines the shape of the peptide nodes in the Cytoscape network view. The possible values of this parameter were described above.
#	Default value if not provided: ROUNDRECT.

showCasesInEdges = TRUE/FALSE
#	If this parameter is set to TRUE, the edges will contain a label showing the classification cases for the protein pair analysis.
#	This parameter will not have any effect if significantProteinPairAnalysis = FALSE.
#	Default value if not provided: TRUE.

remarkSignificantPeptides = TRUE/FALSE
#	If this parameter is set to TRUE, the border of significant peptides nodes and edges will be shown with the highlight color.
#	Default value if not provided: TRUE.
